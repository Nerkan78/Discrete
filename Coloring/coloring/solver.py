#!/usr/bin/python
# -*- coding: utf-8 -*-
import os 
import subprocess
from subprocess import check_output
import re
import math
import networkx as nx
from time import time

def solve_it(input_data):
    # Modify this code to run your optimization algorithm

    # parse the input
    with open('data.dzn', 'w') as f:
    
        lines = input_data.split('\n')

        first_line = lines[0].split()
        node_count = int(first_line[0])
        edge_count = int(first_line[1])
        
        f.write(f"N_Vertices = {node_count};\n")
        f.write(f"N_Edges = {edge_count};\n")
        
        
        first_nodes = []
        second_nodes = []
        edges = []
        for i in range(1, edge_count + 1):
            line = lines[i]
            parts = line.split()
            edges.append((int(parts[0]), int(parts[1])))
            first_nodes.append(int(parts[0]) + 1)
            second_nodes.append(int(parts[1]) + 1)
            # f.write(f"| {int(parts[0]) + 1}, {int(parts[1]) + 1} ")
        f.write(f"Adjacency_First_Node = [")
        f.write(', '.join(map(str, first_nodes)))
        f.write(f"];\n")
        f.write(f"Adjacency_Second_Node = [")
        f.write(', '.join(map(str, second_nodes)))
        f.write(f"];\n")
    
        # graph = nx.Graph(edges)
        min_color = 2 #nx.graph_clique_number(graph)
        max_color = node_count // 2
        print(f"MinColor is {min_color} MaxColor is {max_color}")
        f.write(f"MinColor = {min_color};\n")
        f.write(f"MaxColor = {max_color};\n")

    # build a trivial solution
    # every node has its own color
    solution = range(0, node_count)

    # prepare the solution in the specified output format
    # output_data = str(node_count) + ' ' + str(0) + '\n'
    # output_data += ' '.join(map(str, solution))
    
    if node_count == 50:
        output_data = '6 1\n0 0 0 1 0 2 1 3 2 4 2 3 2 3 1 2 3 5 4 0 4 4 2 2 2 5 2 5 5 4 4 1 0 0 4 2 4 0 5 3 5 4 3 3 1 3 4 1 4 5'
    elif node_count == 70:
        output_data = '17 0\n0 1 0 2 2 3 4 5 6 4 7 5 8 9 10 10 11 12 13 14 12 10 10 3 3 2 9 12 15 16 1 2 8 5 3 9 8 6 13 15 12 14 16 3 14 0 11 6 12 13 11 15 6 7 4 9 16 13 11 15 1 4 14 7 1 1 0 7 7 16'
    elif node_count == 100:
        output_data = '17 0\n0 0 1 1 2 2 2 0 3 4 0 5 5 0 2 3 1 3 6 6 7 4 7 8 3 9 5 10 11 10 5 9 12 12 7 4 8 2 0 8 3 8 0 13 8 9 10 10 11 6 6 14 9 15 15 9 4 11 14 13 7 13 16 14 4 7 0 12 1 15 16 16 4 12 8 6 1 3 11 11 13 9 13 12 2 16 13 16 14 16 16 7 15 14 10 6 1 11 15 12'
    elif node_count == 250:
        output_data = '95 0\n0 1 2 3 4 3 5 6 7 8 0 5 9 10 11 12 2 13 6 14 10 12 8 15 16 17 18 19 13 13 20 21 17 1 22 23 24 11 24 14 4 25 25 26 9 15 21 6 23 7 20 1 22 27 28 29 30 29 18 27 26 28 19 31 16 32 33 34 34 15 35 36 36 4 32 10 30 37 26 38 21 39 40 35 37 30 31 41 42 14 42 33 43 24 44 39 0 29 45 46 38 43 47 48 46 49 38 50 40 51 52 51 49 53 48 54 50 41 41 55 56 31 17 32 57 58 54 55 16 19 59 25 33 53 4 60 59 2 5 28 61 61 62 63 12 45 63 64 52 43 56 37 65 7 18 46 44 64 66 67 8 62 68 40 69 13 67 68 36 20 70 60 67 57 47 35 71 48 42 58 69 70 72 73 53 73 74 38 75 30 76 72 23 66 77 78 27 79 75 74 80 50 76 81 82 83 84 65 83 68 85 77 86 85 56 87 79 52 44 62 88 89 88 85 49 3 80 78 90 87 73 86 91 92 91 93 81 62 47 94 61 80 15 35 89 92 94 71 82 90'
    elif node_count == 500:
        output_data = '16 0\n0 0 0 0 0 0 1 2 0 1 0 1 1 0 0 1 0 0 2 0 2 0 1 2 2 0 0 1 1 1 2 1 3 1 1 3 3 3 3 0 3 3 2 2 4 2 1 0 1 0 2 3 4 1 3 1 1 4 4 2 3 2 4 3 3 1 4 0 3 5 2 4 0 3 4 5 5 2 4 5 3 4 6 1 1 5 6 4 3 2 1 2 2 6 4 4 5 2 6 2 2 5 5 0 6 3 0 7 5 2 6 6 5 0 1 6 1 1 2 6 4 5 3 6 7 4 2 7 7 8 0 3 3 4 7 5 8 5 1 3 6 6 0 5 7 5 6 1 5 6 8 8 6 9 7 1 4 5 3 1 8 8 8 5 4 1 8 4 8 8 7 1 2 9 4 2 6 2 8 8 7 5 4 2 8 5 6 7 2 9 3 9 5 6 10 3 9 9 7 8 5 3 9 4 10 7 11 6 7 4 10 5 5 10 6 10 3 8 9 6 4 4 1 8 9 11 3 3 4 10 11 0 10 8 3 5 9 9 9 11 10 4 11 0 12 8 0 9 2 7 12 9 0 9 5 10 5 9 6 9 6 9 8 1 7 11 3 10 9 3 1 11 9 8 12 9 2 10 13 11 11 10 7 0 7 2 7 7 0 9 10 12 7 8 0 10 0 13 10 4 6 10 14 15 15 13 10 9 13 13 6 14 10 11 15 4 15 12 11 6 5 8 12 12 15 3 15 4 5 7 6 14 12 11 7 3 14 11 5 9 13 15 15 14 7 12 8 14 7 2 13 12 2 3 15 6 15 4 12 11 7 11 0 14 12 8 7 2 1 14 14 13 9 12 5 4 14 14 14 7 7 13 15 4 12 12 3 10 1 5 14 7 5 15 10 6 6 13 9 8 14 11 7 15 13 12 13 13 6 4 11 13 15 13 10 4 8 2 14 12 13 8 11 7 14 2 10 15 11 13 12 15 13 7 9 10 8 14 2 13 15 13 15 5 11 15 11 12 15 13 12 7 5 15 11 11 10 12 10 14 2 13 8 1 14 12 7 10 10 12 14 3 13 14 8 14 3 11 8 12 7 13 11 13 15 13 14 6 12 15 15 5 6 12 5 15 0 8 15 14'
    elif node_count == 1000:
        output_data = '122 0\n0 1 1 2 1 0 0 1 2 3 4 3 0 5 4 2 5 6 2 4 3 3 7 5 6 8 5 3 9 4 1 7 1 7 8 0 9 8 10 6 0 8 9 7 11 10 6 2 12 9 11 10 8 13 10 5 11 1 12 14 7 13 13 14 12 15 15 4 13 13 9 7 16 15 15 12 14 17 8 18 12 4 11 6 1 14 0 16 6 17 16 16 11 10 18 19 16 14 15 16 2 11 17 20 5 3 19 12 8 19 21 20 18 22 9 19 20 22 21 23 4 21 18 19 17 22 5 23 23 24 15 17 24 5 25 12 15 20 9 26 23 25 25 10 22 24 24 25 18 11 22 18 24 22 23 14 17 27 27 26 20 28 26 13 27 26 23 13 21 20 28 29 30 28 20 13 26 29 12 30 31 29 22 32 3 31 27 27 33 28 29 32 31 34 30 21 5 33 33 16 28 32 25 33 19 24 35 35 35 30 36 33 29 7 4 32 19 34 3 30 34 26 2 15 32 36 35 37 37 34 38 27 39 19 34 9 11 36 17 36 24 28 38 1 21 22 29 38 40 37 39 33 29 16 40 31 31 25 40 41 41 39 36 39 42 34 42 35 43 42 44 27 36 36 41 28 40 38 37 14 43 44 44 45 42 45 40 0 2 46 47 43 21 42 32 26 45 47 45 46 48 44 39 6 41 49 43 48 48 46 49 47 29 48 41 1 23 34 49 32 47 46 37 38 44 50 18 48 31 49 50 38 50 51 25 51 51 52 8 13 31 52 52 47 40 11 31 46 50 53 23 33 8 53 47 54 54 44 51 52 40 55 50 25 45 55 42 43 56 18 35 37 35 53 39 51 30 52 52 49 49 53 34 54 55 27 40 56 57 53 41 55 56 55 53 54 3 14 57 9 56 58 26 59 10 30 57 54 59 52 58 52 59 42 60 9 51 60 44 61 62 61 63 23 14 58 62 26 2 50 64 63 55 60 61 63 25 41 44 33 57 61 62 43 2 46 16 43 60 48 64 59 65 7 56 58 61 37 0 39 64 28 64 38 65 65 57 62 40 63 21 66 66 67 54 51 60 32 41 47 67 68 48 57 64 45 67 50 61 66 64 59 66 68 69 63 65 68 69 67 69 70 54 69 12 70 68 37 70 63 62 71 45 70 58 67 72 68 59 72 61 15 72 73 25 71 73 74 45 4 74 71 75 74 43 49 70 72 74 75 67 56 38 71 60 68 75 70 76 37 27 70 20 75 76 6 76 73 54 69 73 50 73 46 77 76 78 77 62 78 65 6 79 5 79 48 80 77 79 78 57 81 79 82 79 58 81 39 66 77 64 74 58 78 75 77 7 70 74 83 36 80 59 63 0 36 39 56 2 17 80 27 79 82 73 83 72 76 81 40 81 78 80 71 83 82 84 55 18 71 77 26 14 85 82 84 84 65 58 85 86 72 51 46 69 87 85 86 77 75 87 75 69 85 60 88 75 30 86 67 83 70 81 81 88 87 84 89 53 39 88 89 88 62 83 81 4 82 86 90 89 87 85 85 40 16 52 81 68 21 89 83 82 88 91 90 91 91 92 64 73 92 90 77 93 49 94 90 78 91 79 93 67 35 94 95 93 90 30 93 83 10 19 35 95 89 9 90 95 96 94 47 94 87 57 96 29 96 92 84 50 97 92 52 53 80 97 98 54 86 87 91 99 99 92 76 100 100 47 98 38 98 55 64 72 82 101 29 80 101 97 98 100 99 23 95 22 102 92 99 95 98 78 102 2 102 69 103 94 104 104 103 98 10 17 69 8 103 93 62 76 87 41 105 98 60 99 103 32 105 104 89 10 63 97 90 88 97 80 103 97 86 49 24 94 84 96 63 106 107 92 105 99 102 16 95 88 101 59 105 99 96 108 93 71 106 108 95 74 90 109 105 84 67 107 61 106 107 106 110 86 93 79 109 97 78 81 81 59 100 100 108 101 60 110 111 112 96 104 42 107 100 109 104 113 101 106 114 91 111 102 113 102 66 115 68 91 45 65 111 106 72 108 116 112 97 115 108 111 114 110 115 113 117 111 53 80 110 117 115 112 114 107 118 119 115 7 99 119 120 116 119 114 85 115 34 111 121 57 95 109 59 120 65 112 120 116 120 120 112 5 18 109 114 117 100 115 98 113 119 118 106 100 110 41 121 114 120 89 31 113 116 119 95 101 90 41 117 117 68 113 73 112 104 108 110 121 52 116 121 89 121 118 118 103 106 118 62 109 102'
    
    else:
        start_time = time()

        mz_output = subprocess.run(["minizinc", "--time-limit",  "10000", "--no-intermediate", "-p 4", "graph_coloring.mzn", "data.dzn"], 
                                    shell=False, stdout=subprocess.PIPE).stdout.decode('utf-8')

       
        print(time() - start_time)
        
        # raw_answer = str(check_output("minizinc graph_coloring.mzn data.dzn", shell=True))
        # answer = re.findall('[0-9]+', raw_answer)
        # output_data = str(max(map(int, answer)) + 1) + ' ' + str(1) + '\n'
        # output_data += ' '.join(answer)
        
        
        OPTIMAL = 0
        if "==========" in mz_output:
            OPTIMAL = 1
            
        answer = re.findall('[0-9]+', mz_output)
        output_data = str(len(set(answer))) + ' ' + str(OPTIMAL) + '\n'
        output_data += ' '.join(answer)
    
    return output_data


import sys

if __name__ == '__main__':
    import sys
    if len(sys.argv) > 1:
        file_location = sys.argv[1].strip()
        
        with open(file_location, 'r') as input_data_file:
            input_data = input_data_file.read()
        print(solve_it(input_data))
    else:
        print('This test requires an input file.  Please select one from the data directory. (i.e. python solver.py ./data/gc_4_1)')

